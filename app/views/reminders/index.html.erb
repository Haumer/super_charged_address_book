<div class="reminders-wrapper wrapper">
    <div class="today">
        <div class="top-tabs">
            <div class="day active tab" data-tab="today">
                TODAY
            </div>
            <div class="upcoming tab" data-tab="actions">
                ACTIONS
            </div>
        </div>
        <div class="tab-content hidden"  data-tab="actions">
            <div class="tab-header">
                Actions
            </div>
            You are all set!
        </div>
        <div class="today-reminders tab-content" data-tab="today">
            <div class="tab-header">
                Today
            </div>
            <div class="reminders">
                <% @today_reminders.each do |reminder| %>
                    <%= render "reminder", reminder: reminder, display_name: true %>
                <% end %>
            </div>
        </div>
    </div>
    <% if @tomorrow_reminders.present? %>
        <div class="tomorrow">
            <div class="tomorrow-reminders">
                <div class="date">
                    Tomorrow
                </div>
                <div class="reminders">
                    <% @tomorrow_reminders.each do |reminder| %>
                        <%= render "reminder", reminder: reminder, display_name: true %>
                    <% end %>
                </div>
            </div>
        </div>
    <% end %>
    <% @future_reminders.each do |day, reminders| %>
        <div class="future-reminders">
            <div class="date-distance">
                <%= time_distance(Date.today, day + 1.day) %>
            </div>
            <div class="date">
                <%= format_date(day + 1.day) %>
            </div>
            <div class="reminders">
                <% reminders.each do |reminder| %>
                    <%= render "reminder", reminder: reminder, display_name: true %>
                <% end %>
            </div>
        </div>
    <% end %>
</div>

<script>
if(!(typeof tabs !== "undefined")) {
    let tabs = document.querySelectorAll(".tab");
    let contentTabs = document.querySelectorAll(".tab-content")
    if(typeof localStorage.getItem("activeTab") !== "undefined") {
        tabs.forEach(tab => {
            if(tab.dataset.tab === localStorage.activeTab) {
                tab.classList.add("active")
                contentTabs.forEach(contentTab =>{
                    contentTab.classList.add("hidden")
                    if(contentTab.dataset.tab === tab.dataset.tab) {
                        contentTab.classList.remove("hidden")
                    }
                })
            } else {
                tab.classList.remove("active")
                contentTabs.forEach(contentTab =>{
                    contentTab.classList.remove("hidden")
                    if(contentTab.dataset.tab === tab.dataset.tab) {
                        contentTab.classList.add("hidden")
                    }
                })
            }
        })
    }
    tabs.forEach(tab => {
        tab.addEventListener("click", (e) => {
           if(!tab.classList.contains("active")) {
                tabs.forEach(itab => { itab.classList.remove("active") })
                localStorage.setItem("activeTab", tab.dataset.tab)
                tab.classList.add("active")
                contentTabs.forEach(contentTab =>{
                    contentTab.classList.add("hidden")
                    if(contentTab.dataset.tab === tab.dataset.tab) {
                        contentTab.classList.remove("hidden")
                    }
                })
           }
        })
    })
}
</script>